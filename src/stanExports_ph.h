// Generated by rstantools.  Do not edit by hand.

/*
    parTimeROC is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    parTimeROC is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with parTimeROC.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_ph_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 144> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 65, column 4 to column 15)",
  " (in 'string', line 66, column 4 to column 53)",
  " (in 'string', line 67, column 4 to column 53)",
  " (in 'string', line 68, column 4 to column 54)",
  " (in 'string', line 69, column 4 to column 55)",
  " (in 'string', line 70, column 4 to column 38)",
  " (in 'string', line 71, column 4 to column 40)",
  " (in 'string', line 72, column 4 to column 54)",
  " (in 'string', line 73, column 4 to column 42)",
  " (in 'string', line 76, column 11 to column 12)",
  " (in 'string', line 76, column 4 to column 17)",
  " (in 'string', line 77, column 11 to column 12)",
  " (in 'string', line 77, column 4 to column 16)",
  " (in 'string', line 78, column 11 to column 12)",
  " (in 'string', line 78, column 4 to column 21)",
  " (in 'string', line 79, column 11 to column 12)",
  " (in 'string', line 79, column 4 to column 19)",
  " (in 'string', line 80, column 11 to column 12)",
  " (in 'string', line 80, column 4 to column 20)",
  " (in 'string', line 82, column 6 to column 27)",
  " (in 'string', line 83, column 6 to column 19)",
  " (in 'string', line 81, column 11 to line 84, column 5)",
  " (in 'string', line 81, column 4 to line 84, column 5)",
  " (in 'string', line 85, column 4 to column 13)",
  " (in 'string', line 121, column 6 to column 25)",
  " (in 'string', line 122, column 6 to column 28)",
  " (in 'string', line 123, column 6 to column 26)",
  " (in 'string', line 125, column 8 to column 58)",
  " (in 'string', line 126, column 8 to column 60)",
  " (in 'string', line 124, column 19 to line 127, column 7)",
  " (in 'string', line 124, column 6 to line 127, column 7)",
  " (in 'string', line 120, column 27 to line 128, column 5)",
  " (in 'string', line 120, column 10 to line 128, column 5)",
  " (in 'string', line 114, column 6 to column 29)",
  " (in 'string', line 115, column 6 to column 29)",
  " (in 'string', line 117, column 8 to column 57)",
  " (in 'string', line 118, column 8 to column 59)",
  " (in 'string', line 116, column 19 to line 119, column 7)",
  " (in 'string', line 116, column 6 to line 119, column 7)",
  " (in 'string', line 113, column 27 to line 120, column 5)",
  " (in 'string', line 113, column 10 to line 128, column 5)",
  " (in 'string', line 107, column 6 to column 23)",
  " (in 'string', line 108, column 6 to column 28)",
  " (in 'string', line 110, column 8 to column 49)",
  " (in 'string', line 111, column 8 to column 51)",
  " (in 'string', line 109, column 19 to line 112, column 7)",
  " (in 'string', line 109, column 6 to line 112, column 7)",
  " (in 'string', line 106, column 27 to line 113, column 5)",
  " (in 'string', line 106, column 10 to line 128, column 5)",
  " (in 'string', line 100, column 6 to column 25)",
  " (in 'string', line 101, column 6 to column 28)",
  " (in 'string', line 103, column 8 to column 46)",
  " (in 'string', line 104, column 8 to column 48)",
  " (in 'string', line 102, column 19 to line 105, column 7)",
  " (in 'string', line 102, column 6 to line 105, column 7)",
  " (in 'string', line 99, column 27 to line 106, column 5)",
  " (in 'string', line 99, column 10 to line 128, column 5)",
  " (in 'string', line 93, column 6 to column 26)",
  " (in 'string', line 94, column 6 to column 26)",
  " (in 'string', line 96, column 8 to column 50)",
  " (in 'string', line 97, column 8 to column 52)",
  " (in 'string', line 95, column 19 to line 98, column 7)",
  " (in 'string', line 95, column 6 to line 98, column 7)",
  " (in 'string', line 92, column 27 to line 99, column 5)",
  " (in 'string', line 92, column 10 to line 128, column 5)",
  " (in 'string', line 87, column 6 to column 27)",
  " (in 'string', line 89, column 8 to column 48)",
  " (in 'string', line 90, column 8 to column 50)",
  " (in 'string', line 88, column 19 to line 91, column 7)",
  " (in 'string', line 88, column 6 to line 91, column 7)",
  " (in 'string', line 86, column 21 to line 92, column 5)",
  " (in 'string', line 86, column 4 to line 128, column 5)",
  " (in 'string', line 132, column 6 to column 49)",
  " (in 'string', line 131, column 9 to line 133, column 5)",
  " (in 'string', line 130, column 6 to column 50)",
  " (in 'string', line 129, column 14 to line 131, column 5)",
  " (in 'string', line 129, column 4 to line 133, column 5)",
  " (in 'string', line 134, column 4 to column 26)",
  " (in 'string', line 27, column 2 to column 8)",
  " (in 'string', line 28, column 2 to column 8)",
  " (in 'string', line 29, column 9 to column 10)",
  " (in 'string', line 29, column 2 to column 17)",
  " (in 'string', line 30, column 9 to column 10)",
  " (in 'string', line 30, column 2 to column 18)",
  " (in 'string', line 31, column 9 to column 10)",
  " (in 'string', line 31, column 2 to column 14)",
  " (in 'string', line 32, column 2 to column 15)",
  " (in 'string', line 35, column 2 to column 19)",
  " (in 'string', line 36, column 2 to column 19)",
  " (in 'string', line 37, column 2 to column 17)",
  " (in 'string', line 38, column 2 to column 20)",
  " (in 'string', line 39, column 2 to column 16)",
  " (in 'string', line 40, column 2 to column 19)",
  " (in 'string', line 41, column 2 to column 19)",
  " (in 'string', line 42, column 2 to column 18)",
  " (in 'string', line 43, column 9 to column 10)",
  " (in 'string', line 43, column 2 to column 18)",
  " (in 'string', line 59, column 4 to column 15)",
  " (in 'string', line 60, column 4 to column 17)",
  " (in 'string', line 61, column 4 to column 16)",
  " (in 'string', line 58, column 25 to line 62, column 3)",
  " (in 'string', line 58, column 8 to line 62, column 3)",
  " (in 'string', line 56, column 4 to column 17)",
  " (in 'string', line 57, column 4 to column 17)",
  " (in 'string', line 55, column 25 to line 58, column 3)",
  " (in 'string', line 55, column 8 to line 62, column 3)",
  " (in 'string', line 53, column 4 to column 14)",
  " (in 'string', line 54, column 4 to column 17)",
  " (in 'string', line 52, column 25 to line 55, column 3)",
  " (in 'string', line 52, column 8 to line 62, column 3)",
  " (in 'string', line 50, column 4 to column 14)",
  " (in 'string', line 51, column 4 to column 17)",
  " (in 'string', line 49, column 25 to line 52, column 3)",
  " (in 'string', line 49, column 8 to line 62, column 3)",
  " (in 'string', line 47, column 4 to column 17)",
  " (in 'string', line 48, column 4 to column 17)",
  " (in 'string', line 46, column 25 to line 49, column 3)",
  " (in 'string', line 46, column 8 to line 62, column 3)",
  " (in 'string', line 45, column 4 to column 18)",
  " (in 'string', line 44, column 19 to line 46, column 3)",
  " (in 'string', line 44, column 2 to line 62, column 3)",
  " (in 'string', line 66, column 10 to column 31)",
  " (in 'string', line 67, column 10 to column 31)",
  " (in 'string', line 68, column 10 to column 32)",
  " (in 'string', line 69, column 10 to column 32)",
  " (in 'string', line 70, column 10 to column 28)",
  " (in 'string', line 71, column 10 to column 29)",
  " (in 'string', line 72, column 10 to column 32)",
  " (in 'string', line 73, column 10 to column 30)",
  " (in 'string', line 9, column 4 to column 73)",
  " (in 'string', line 10, column 4 to column 16)",
  " (in 'string', line 8, column 52 to line 11, column 3)",
  " (in 'string', line 14, column 2 to column 38)",
  " (in 'string', line 15, column 2 to column 15)",
  " (in 'string', line 13, column 51 to line 16, column 1)",
  " (in 'string', line 19, column 2 to column 29)",
  " (in 'string', line 20, column 9 to column 10)",
  " (in 'string', line 20, column 2 to column 19)",
  " (in 'string', line 21, column 9 to column 10)",
  " (in 'string', line 21, column 2 to column 31)",
  " (in 'string', line 22, column 2 to column 53)",
  " (in 'string', line 23, column 2 to column 16)",
  " (in 'string', line 18, column 68 to line 24, column 1)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
gompertz_lpdf(const T0__& x, const T1__& alpha, const T2__& gamma,
              std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
gompertz_lccdf(const T0__& x, const T1__& alpha, const T2__& gamma,
               std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,1>
loglik_ph(const T0__& lpdf_arg__, const T1__& lsurv_arg__, const T2__&
          event_arg__, const T3__& lp_arg__, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
gompertz_lpdf(const T0__& x, const T1__& alpha, const T2__& gamma,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ lpdf = DUMMY_VAR__;
    current_statement__ = 130;
    lpdf = (((stan::math::log(alpha) + stan::math::log(gamma)) + (gamma * x))
      - (alpha * stan::math::expm1((gamma * x))));
    current_statement__ = 131;
    return lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
gompertz_lccdf(const T0__& x, const T1__& alpha, const T2__& gamma,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ lsurv = DUMMY_VAR__;
    current_statement__ = 133;
    lsurv = (-alpha * stan::math::expm1((gamma * x)));
    current_statement__ = 134;
    return lsurv;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,1>
loglik_ph(const T0__& lpdf_arg__, const T1__& lsurv_arg__, const T2__&
          event_arg__, const T3__& lp_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& lpdf = stan::math::to_ref(lpdf_arg__);
  const auto& lsurv = stan::math::to_ref(lsurv_arg__);
  const auto& event = stan::math::to_ref(event_arg__);
  const auto& lp = stan::math::to_ref(lp_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 136;
    n = stan::math::num_elements(lpdf);
    current_statement__ = 137;
    stan::math::validate_non_negative_index("loglik", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> loglik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 139;
    stan::math::validate_non_negative_index("lht", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> lht =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 140;
    stan::model::assign(lht, stan::math::subtract(lpdf, lsurv),
      "assigning variable lht");
    current_statement__ = 141;
    stan::model::assign(loglik,
      stan::math::add(
        stan::math::elt_multiply(event, stan::math::add(lht, lp)),
        stan::math::elt_multiply(stan::math::exp(lp), lsurv)),
      "assigning variable loglik");
    current_statement__ = 142;
    return loglik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_ph final : public model_base_crtp<model_ph> {
private:
  int n;
  int p;
  Eigen::Matrix<double,-1,1> time_data__;
  Eigen::Matrix<double,-1,1> event_data__;
  Eigen::Matrix<double,-1,1> X_data__;
  int baseline;
  int is_alpha;
  int is_gamma;
  int is_loc;
  int is_lambda;
  int is_mu;
  int is_sigma;
  int is_omega;
  int is_skew;
  Eigen::Matrix<double,-1,1> zeros_data__;
  int alpha_1dim__;
  int gamma_1dim__;
  int omega_1dim__;
  int lambda_1dim__;
  int mu_1dim__;
  int loc_1dim__;
  int sigma_1dim__;
  int skew_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> time{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> event{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> X{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> zeros{nullptr, 0};
public:
  ~model_ph() {}
  model_ph(stan::io::var_context& context__, unsigned int random_seed__ = 0,
           std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ = "model_ph_namespace::model_ph";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 79;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 79;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 80;
      context__.validate_dims("data initialization", "p", "int",
        std::vector<size_t>{});
      p = std::numeric_limits<int>::min();
      current_statement__ = 80;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 81;
      stan::math::validate_non_negative_index("time", "n", n);
      current_statement__ = 82;
      context__.validate_dims("data initialization", "time", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      time_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                      std::numeric_limits<double>::quiet_NaN());
      new (&time) Eigen::Map<Eigen::Matrix<double,-1,1>>(time_data__.data(),
        n);
      {
        std::vector<local_scalar_t__> time_flat__;
        current_statement__ = 82;
        time_flat__ = context__.vals_r("time");
        current_statement__ = 82;
        pos__ = 1;
        current_statement__ = 82;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 82;
          stan::model::assign(time, time_flat__[(pos__ - 1)],
            "assigning variable time", stan::model::index_uni(sym1__));
          current_statement__ = 82;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 83;
      stan::math::validate_non_negative_index("event", "n", n);
      current_statement__ = 84;
      context__.validate_dims("data initialization", "event", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      event_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                       std::numeric_limits<double>::quiet_NaN());
      new (&event)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(event_data__.data(), n);
      {
        std::vector<local_scalar_t__> event_flat__;
        current_statement__ = 84;
        event_flat__ = context__.vals_r("event");
        current_statement__ = 84;
        pos__ = 1;
        current_statement__ = 84;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 84;
          stan::model::assign(event, event_flat__[(pos__ - 1)],
            "assigning variable event", stan::model::index_uni(sym1__));
          current_statement__ = 84;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 85;
      stan::math::validate_non_negative_index("X", "n", n);
      current_statement__ = 86;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      X_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,1>>(X_data__.data(), n);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 86;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 86;
        pos__ = 1;
        current_statement__ = 86;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 86;
          stan::model::assign(X, X_flat__[(pos__ - 1)],
            "assigning variable X", stan::model::index_uni(sym1__));
          current_statement__ = 86;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 87;
      context__.validate_dims("data initialization", "baseline", "int",
        std::vector<size_t>{});
      baseline = std::numeric_limits<int>::min();
      current_statement__ = 87;
      baseline = context__.vals_i("baseline")[(1 - 1)];
      current_statement__ = 88;
      is_alpha = std::numeric_limits<int>::min();
      current_statement__ = 88;
      is_alpha = 0;
      current_statement__ = 89;
      is_gamma = std::numeric_limits<int>::min();
      current_statement__ = 89;
      is_gamma = 0;
      current_statement__ = 90;
      is_loc = std::numeric_limits<int>::min();
      current_statement__ = 90;
      is_loc = 0;
      current_statement__ = 91;
      is_lambda = std::numeric_limits<int>::min();
      current_statement__ = 91;
      is_lambda = 0;
      current_statement__ = 92;
      is_mu = std::numeric_limits<int>::min();
      current_statement__ = 92;
      is_mu = 0;
      current_statement__ = 93;
      is_sigma = std::numeric_limits<int>::min();
      current_statement__ = 93;
      is_sigma = 0;
      current_statement__ = 94;
      is_omega = std::numeric_limits<int>::min();
      current_statement__ = 94;
      is_omega = 0;
      current_statement__ = 95;
      is_skew = std::numeric_limits<int>::min();
      current_statement__ = 95;
      is_skew = 0;
      current_statement__ = 96;
      stan::math::validate_non_negative_index("zeros", "n", n);
      current_statement__ = 97;
      zeros_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                       std::numeric_limits<double>::quiet_NaN());
      new (&zeros)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(zeros_data__.data(), n);
      current_statement__ = 121;
      if (stan::math::logical_eq(baseline, 1)) {
        current_statement__ = 119;
        is_lambda = 1;
      } else {
        current_statement__ = 118;
        if (stan::math::logical_eq(baseline, 2)) {
          current_statement__ = 115;
          is_alpha = 1;
          current_statement__ = 116;
          is_gamma = 1;
        } else {
          current_statement__ = 114;
          if (stan::math::logical_eq(baseline, 3)) {
            current_statement__ = 111;
            is_mu = 1;
            current_statement__ = 112;
            is_sigma = 1;
          } else {
            current_statement__ = 110;
            if (stan::math::logical_eq(baseline, 4)) {
              current_statement__ = 107;
              is_mu = 1;
              current_statement__ = 108;
              is_sigma = 1;
            } else {
              current_statement__ = 106;
              if (stan::math::logical_eq(baseline, 5)) {
                current_statement__ = 103;
                is_alpha = 1;
                current_statement__ = 104;
                is_gamma = 1;
              } else {
                current_statement__ = 102;
                if (stan::math::logical_eq(baseline, 6)) {
                  current_statement__ = 98;
                  is_loc = 1;
                  current_statement__ = 99;
                  is_omega = 1;
                  current_statement__ = 100;
                  is_skew = 1;
                }
              }
            }
          }
        }
      }
      current_statement__ = 122;
      alpha_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 122;
      alpha_1dim__ = (stan::math::logical_eq(is_alpha, 0) ? 0 : 1);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("alpha",
        "is_alpha == 0 ? 0 : 1", alpha_1dim__);
      current_statement__ = 123;
      gamma_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 123;
      gamma_1dim__ = (stan::math::logical_eq(is_gamma, 0) ? 0 : 1);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("gamma",
        "is_gamma == 0 ? 0 : 1", gamma_1dim__);
      current_statement__ = 124;
      omega_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 124;
      omega_1dim__ = (stan::math::logical_eq(is_omega, 0) ? 0 : 1);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("omega",
        "is_omega == 0 ? 0 : 1", omega_1dim__);
      current_statement__ = 125;
      lambda_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 125;
      lambda_1dim__ = (stan::math::logical_eq(is_lambda, 0) ? 0 : 1);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("lambda",
        "is_lambda == 0 ? 0 : 1", lambda_1dim__);
      current_statement__ = 126;
      mu_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 126;
      mu_1dim__ = (stan::math::logical_eq(is_mu, 0) ? 0 : 1);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("mu", "is_mu == 0 ? 0 : 1",
        mu_1dim__);
      current_statement__ = 127;
      loc_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 127;
      loc_1dim__ = (stan::math::logical_eq(is_loc, 0) ? 0 : 1);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("loc", "is_loc == 0 ? 0 : 1",
        loc_1dim__);
      current_statement__ = 128;
      sigma_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 128;
      sigma_1dim__ = (stan::math::logical_eq(is_sigma, 0) ? 0 : 1);
      current_statement__ = 128;
      stan::math::validate_non_negative_index("sigma",
        "is_sigma == 0 ? 0 : 1", sigma_1dim__);
      current_statement__ = 129;
      skew_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 129;
      skew_1dim__ = (stan::math::logical_eq(is_skew, 0) ? 0 : 1);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("skew", "is_skew == 0 ? 0 : 1",
        skew_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + alpha_1dim__ + gamma_1dim__ + omega_1dim__ +
      lambda_1dim__ + mu_1dim__ + loc_1dim__ + sigma_1dim__ + skew_1dim__;
  }
  inline std::string model_name() const final {
    return "model_ph";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_ph_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ zbeta = DUMMY_VAR__;
      current_statement__ = 1;
      zbeta = in__.template read<local_scalar_t__>();
      std::vector<local_scalar_t__> alpha =
        std::vector<local_scalar_t__>(alpha_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      alpha = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, alpha_1dim__);
      std::vector<local_scalar_t__> gamma =
        std::vector<local_scalar_t__>(gamma_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      gamma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, gamma_1dim__);
      std::vector<local_scalar_t__> omega =
        std::vector<local_scalar_t__>(omega_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      omega = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, omega_1dim__);
      std::vector<local_scalar_t__> lambda =
        std::vector<local_scalar_t__>(lambda_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      lambda = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, lambda_1dim__);
      std::vector<local_scalar_t__> mu =
        std::vector<local_scalar_t__>(mu_1dim__, DUMMY_VAR__);
      current_statement__ = 6;
      mu = in__.template read<std::vector<local_scalar_t__>>(mu_1dim__);
      std::vector<local_scalar_t__> loc =
        std::vector<local_scalar_t__>(loc_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      loc = in__.template read<std::vector<local_scalar_t__>>(loc_1dim__);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(sigma_1dim__, DUMMY_VAR__);
      current_statement__ = 8;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, sigma_1dim__);
      std::vector<local_scalar_t__> skew =
        std::vector<local_scalar_t__>(skew_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      skew = in__.template read<std::vector<local_scalar_t__>>(skew_1dim__);
      {
        current_statement__ = 10;
        stan::math::validate_non_negative_index("lp", "n", n);
        Eigen::Matrix<local_scalar_t__,-1,1> lp =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
        current_statement__ = 12;
        stan::math::validate_non_negative_index("y", "n", n);
        Eigen::Matrix<local_scalar_t__,-1,1> y =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
        current_statement__ = 14;
        stan::math::validate_non_negative_index("loglik", "n", n);
        Eigen::Matrix<local_scalar_t__,-1,1> loglik =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
        current_statement__ = 16;
        stan::math::validate_non_negative_index("lpdf", "n", n);
        Eigen::Matrix<local_scalar_t__,-1,1> lpdf =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
        current_statement__ = 18;
        stan::math::validate_non_negative_index("lsurv", "n", n);
        Eigen::Matrix<local_scalar_t__,-1,1> lsurv =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
        current_statement__ = 23;
        if (stan::math::logical_gt(p, 0)) {
          current_statement__ = 20;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(zbeta, 0, 10));
          current_statement__ = 21;
          stan::model::assign(lp, stan::math::multiply(X, zbeta),
            "assigning variable lp");
        }
        current_statement__ = 24;
        stan::model::assign(y, time, "assigning variable y");
        current_statement__ = 72;
        if (stan::math::logical_eq(baseline, 1)) {
          current_statement__ = 66;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(lambda, 1, 1));
          current_statement__ = 70;
          for (int i = 1; i <= n; ++i) {
            current_statement__ = 67;
            stan::model::assign(lpdf,
              stan::math::exponential_lpdf<false>(
                stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                lambda), "assigning variable lpdf", stan::model::index_uni(i));
            current_statement__ = 68;
            stan::model::assign(lsurv,
              stan::math::exponential_lccdf(
                stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                lambda), "assigning variable lsurv",
              stan::model::index_uni(i));
          }
        } else {
          current_statement__ = 65;
          if (stan::math::logical_eq(baseline, 2)) {
            current_statement__ = 58;
            lp_accum__.add(stan::math::gamma_lpdf<propto__>(alpha, 1, 1));
            current_statement__ = 59;
            lp_accum__.add(stan::math::gamma_lpdf<propto__>(gamma, 1, 1));
            current_statement__ = 63;
            for (int i = 1; i <= n; ++i) {
              current_statement__ = 60;
              stan::model::assign(lpdf,
                stan::math::weibull_lpdf<false>(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                  alpha, gamma), "assigning variable lpdf",
                stan::model::index_uni(i));
              current_statement__ = 61;
              stan::model::assign(lsurv,
                stan::math::weibull_lccdf(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                  alpha, gamma), "assigning variable lsurv",
                stan::model::index_uni(i));
            }
          } else {
            current_statement__ = 57;
            if (stan::math::logical_eq(baseline, 3)) {
              current_statement__ = 50;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0, 10));
              current_statement__ = 51;
              lp_accum__.add(stan::math::gamma_lpdf<propto__>(sigma, 0.1, 1));
              current_statement__ = 55;
              for (int i = 1; i <= n; ++i) {
                current_statement__ = 52;
                stan::model::assign(lpdf,
                  stan::math::normal_lpdf<false>(
                    stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                    mu, sigma), "assigning variable lpdf",
                  stan::model::index_uni(i));
                current_statement__ = 53;
                stan::model::assign(lsurv,
                  stan::math::normal_lccdf(
                    stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                    mu, sigma), "assigning variable lsurv",
                  stan::model::index_uni(i));
              }
            } else {
              current_statement__ = 49;
              if (stan::math::logical_eq(baseline, 4)) {
                current_statement__ = 42;
                lp_accum__.add(stan::math::gamma_lpdf<propto__>(mu, 1, 1));
                current_statement__ = 43;
                lp_accum__.add(stan::math::gamma_lpdf<propto__>(sigma, 0.1, 1));
                current_statement__ = 47;
                for (int i = 1; i <= n; ++i) {
                  current_statement__ = 44;
                  stan::model::assign(lpdf,
                    stan::math::lognormal_lpdf<false>(
                      stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                      mu, sigma), "assigning variable lpdf",
                    stan::model::index_uni(i));
                  current_statement__ = 45;
                  stan::model::assign(lsurv,
                    stan::math::lognormal_lccdf(
                      stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                      mu, sigma), "assigning variable lsurv",
                    stan::model::index_uni(i));
                }
              } else {
                current_statement__ = 41;
                if (stan::math::logical_eq(baseline, 5)) {
                  current_statement__ = 34;
                  lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                                   stan::model::rvalue(alpha, "alpha",
                                     stan::model::index_uni(1)), 1, 1));
                  current_statement__ = 35;
                  lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                                   stan::model::rvalue(gamma, "gamma",
                                     stan::model::index_uni(1)), 1, 1));
                  current_statement__ = 39;
                  for (int i = 1; i <= n; ++i) {
                    current_statement__ = 36;
                    stan::model::assign(lpdf,
                      gompertz_lpdf<false>(
                        stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                        stan::model::rvalue(alpha, "alpha",
                          stan::model::index_uni(1)),
                        stan::model::rvalue(gamma, "gamma",
                          stan::model::index_uni(1)), pstream__),
                      "assigning variable lpdf", stan::model::index_uni(i));
                    current_statement__ = 37;
                    stan::model::assign(lsurv,
                      gompertz_lccdf(
                        stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                        stan::model::rvalue(alpha, "alpha",
                          stan::model::index_uni(1)),
                        stan::model::rvalue(gamma, "gamma",
                          stan::model::index_uni(1)), pstream__),
                      "assigning variable lsurv", stan::model::index_uni(i));
                  }
                } else {
                  current_statement__ = 33;
                  if (stan::math::logical_eq(baseline, 6)) {
                    current_statement__ = 25;
                    lp_accum__.add(stan::math::normal_lpdf<propto__>(loc, 0,
                                     10));
                    current_statement__ = 26;
                    lp_accum__.add(stan::math::gamma_lpdf<propto__>(omega,
                                     0.1, 1));
                    current_statement__ = 27;
                    lp_accum__.add(stan::math::normal_lpdf<propto__>(skew, 0,
                                     10));
                    current_statement__ = 31;
                    for (int i = 1; i <= n; ++i) {
                      current_statement__ = 28;
                      stan::model::assign(lpdf,
                        stan::math::skew_normal_lpdf<false>(
                          stan::model::rvalue(y, "y",
                            stan::model::index_uni(i)), loc, omega, skew),
                        "assigning variable lpdf", stan::model::index_uni(i));
                      current_statement__ = 29;
                      stan::model::assign(lsurv,
                        stan::math::skew_normal_lccdf(
                          stan::model::rvalue(y, "y",
                            stan::model::index_uni(i)), loc, omega, skew),
                        "assigning variable lsurv", stan::model::index_uni(i));
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 77;
        if (stan::math::logical_eq(p, 0)) {
          current_statement__ = 75;
          stan::model::assign(loglik,
            stan::math::add(stan::math::elt_multiply(event, lpdf),
              stan::math::elt_multiply(stan::math::subtract(1, event), lsurv)),
            "assigning variable loglik");
        } else {
          current_statement__ = 73;
          stan::model::assign(loglik,
            loglik_ph(lpdf, lsurv, event, lp, pstream__),
            "assigning variable loglik");
        }
        current_statement__ = 78;
        lp_accum__.add(stan::math::sum(loglik));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_ph_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double zbeta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      zbeta = in__.template read<local_scalar_t__>();
      std::vector<double> alpha =
        std::vector<double>(alpha_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      alpha = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, alpha_1dim__);
      std::vector<double> gamma =
        std::vector<double>(gamma_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      gamma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, gamma_1dim__);
      std::vector<double> omega =
        std::vector<double>(omega_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      omega = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, omega_1dim__);
      std::vector<double> lambda =
        std::vector<double>(lambda_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      lambda = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, lambda_1dim__);
      std::vector<double> mu =
        std::vector<double>(mu_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      mu = in__.template read<std::vector<local_scalar_t__>>(mu_1dim__);
      std::vector<double> loc =
        std::vector<double>(loc_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      loc = in__.template read<std::vector<local_scalar_t__>>(loc_1dim__);
      std::vector<double> sigma =
        std::vector<double>(sigma_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, sigma_1dim__);
      std::vector<double> skew =
        std::vector<double>(skew_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      skew = in__.template read<std::vector<local_scalar_t__>>(skew_1dim__);
      out__.write(zbeta);
      out__.write(alpha);
      out__.write(gamma);
      out__.write(omega);
      out__.write(lambda);
      out__.write(mu);
      out__.write(loc);
      out__.write(sigma);
      out__.write(skew);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ zbeta = DUMMY_VAR__;
      current_statement__ = 1;
      zbeta = in__.read<local_scalar_t__>();
      out__.write(zbeta);
      std::vector<local_scalar_t__> alpha =
        std::vector<local_scalar_t__>(alpha_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(alpha,
        in__.read<std::vector<local_scalar_t__>>(alpha_1dim__),
        "assigning variable alpha");
      out__.write_free_lb(0, alpha);
      std::vector<local_scalar_t__> gamma =
        std::vector<local_scalar_t__>(gamma_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(gamma,
        in__.read<std::vector<local_scalar_t__>>(gamma_1dim__),
        "assigning variable gamma");
      out__.write_free_lb(0, gamma);
      std::vector<local_scalar_t__> omega =
        std::vector<local_scalar_t__>(omega_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(omega,
        in__.read<std::vector<local_scalar_t__>>(omega_1dim__),
        "assigning variable omega");
      out__.write_free_lb(0, omega);
      std::vector<local_scalar_t__> lambda =
        std::vector<local_scalar_t__>(lambda_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(lambda,
        in__.read<std::vector<local_scalar_t__>>(lambda_1dim__),
        "assigning variable lambda");
      out__.write_free_lb(0, lambda);
      std::vector<local_scalar_t__> mu =
        std::vector<local_scalar_t__>(mu_1dim__, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(mu,
        in__.read<std::vector<local_scalar_t__>>(mu_1dim__),
        "assigning variable mu");
      out__.write(mu);
      std::vector<local_scalar_t__> loc =
        std::vector<local_scalar_t__>(loc_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(loc,
        in__.read<std::vector<local_scalar_t__>>(loc_1dim__),
        "assigning variable loc");
      out__.write(loc);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(sigma_1dim__, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(sigma,
        in__.read<std::vector<local_scalar_t__>>(sigma_1dim__),
        "assigning variable sigma");
      out__.write_free_lb(0, sigma);
      std::vector<local_scalar_t__> skew =
        std::vector<local_scalar_t__>(skew_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(skew,
        in__.read<std::vector<local_scalar_t__>>(skew_1dim__),
        "assigning variable skew");
      out__.write(skew);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "zbeta", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(alpha_1dim__)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "gamma", "double",
        std::vector<size_t>{static_cast<size_t>(gamma_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "omega", "double",
        std::vector<size_t>{static_cast<size_t>(omega_1dim__)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "lambda", "double",
        std::vector<size_t>{static_cast<size_t>(lambda_1dim__)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{static_cast<size_t>(mu_1dim__)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "loc", "double",
        std::vector<size_t>{static_cast<size_t>(loc_1dim__)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(sigma_1dim__)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "skew", "double",
        std::vector<size_t>{static_cast<size_t>(skew_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ zbeta = DUMMY_VAR__;
      current_statement__ = 1;
      zbeta = context__.vals_r("zbeta")[(1 - 1)];
      out__.write(zbeta);
      std::vector<local_scalar_t__> alpha =
        std::vector<local_scalar_t__>(alpha_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      alpha = context__.vals_r("alpha");
      out__.write_free_lb(0, alpha);
      std::vector<local_scalar_t__> gamma =
        std::vector<local_scalar_t__>(gamma_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      gamma = context__.vals_r("gamma");
      out__.write_free_lb(0, gamma);
      std::vector<local_scalar_t__> omega =
        std::vector<local_scalar_t__>(omega_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      omega = context__.vals_r("omega");
      out__.write_free_lb(0, omega);
      std::vector<local_scalar_t__> lambda =
        std::vector<local_scalar_t__>(lambda_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      lambda = context__.vals_r("lambda");
      out__.write_free_lb(0, lambda);
      std::vector<local_scalar_t__> mu =
        std::vector<local_scalar_t__>(mu_1dim__, DUMMY_VAR__);
      current_statement__ = 6;
      mu = context__.vals_r("mu");
      out__.write(mu);
      std::vector<local_scalar_t__> loc =
        std::vector<local_scalar_t__>(loc_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      loc = context__.vals_r("loc");
      out__.write(loc);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(sigma_1dim__, DUMMY_VAR__);
      current_statement__ = 8;
      sigma = context__.vals_r("sigma");
      out__.write_free_lb(0, sigma);
      std::vector<local_scalar_t__> skew =
        std::vector<local_scalar_t__>(skew_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      skew = context__.vals_r("skew");
      out__.write(skew);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"zbeta", "alpha", "gamma", "omega",
                "lambda", "mu", "loc", "sigma", "skew"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(alpha_1dim__)},
                std::vector<size_t>{static_cast<size_t>(gamma_1dim__)},
                std::vector<size_t>{static_cast<size_t>(omega_1dim__)},
                std::vector<size_t>{static_cast<size_t>(lambda_1dim__)},
                std::vector<size_t>{static_cast<size_t>(mu_1dim__)},
                std::vector<size_t>{static_cast<size_t>(loc_1dim__)},
                std::vector<size_t>{static_cast<size_t>(sigma_1dim__)},
                std::vector<size_t>{static_cast<size_t>(skew_1dim__)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "zbeta");
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gamma_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= omega_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "omega" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= loc_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "loc" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= skew_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "skew" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "zbeta");
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gamma_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= omega_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "omega" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= loc_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "loc" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= skew_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "skew" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"zbeta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(alpha_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(gamma_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(omega_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lambda_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mu_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"loc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(loc_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"skew\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(skew_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"zbeta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(alpha_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(gamma_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(omega_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lambda_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mu_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"loc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(loc_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"skew\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(skew_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((1 + alpha_1dim__) + gamma_1dim__) +
      omega_1dim__) + lambda_1dim__) + mu_1dim__) + loc_1dim__) +
      sigma_1dim__) + skew_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((1 + alpha_1dim__) + gamma_1dim__) +
      omega_1dim__) + lambda_1dim__) + mu_1dim__) + loc_1dim__) +
      sigma_1dim__) + skew_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_ph_namespace::model_ph;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_ph_namespace::profiles__;
}
#endif
#endif
